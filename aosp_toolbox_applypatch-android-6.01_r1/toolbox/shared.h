#ifndef __SHARED_H__
#define __SHARED_H__

#include <android/log.h>


const char * RSF_SENT_FILE_LIST;
										/* toolbox.c shouldn't read until bridge is finished writing */
										//~~~
										/* bridge.c dual purpose -- when RSF_SENT_FILE_LIST == 0 again toolbox is all done */

										/* bridge.c sets this to 1 to let farm.c know that exploit is complete, ok to close */								  		

const char * RSF_IREC_DONE; 	 
								  		/* system _server / install_recovery both loop to test each line of cmd_list.txt 
											0 = install_recovery tests and if applies issues command
											1 = system_server test and then and if applies issues command */


		/* toolbox.c only run SERVER_CONTEXT once */
		const char * RSF_TOOLBOX_RUN_ONCE;	

		/* toolbox will wait if -#e is in the cmd_list.txt file for the minutes set in bridge.c default value, this file */
const char * RSF_TOOLBOX_WAIT;
									  		




			/* Function Declarations */
//int is for expected value, const char * is for above const char * file path
int increment_value(int, const char *); /* if expected_value == current file value it will increment that value by 1
										   otherwise it will evulate false i.e. return 0 */
			
//test our the state of our true/false 'ready state' logic files.
int check_value(const char * targetfile);

//set 1 or 0 inside a text file which will represent true or false respectively.
int set_value(int targetvalue, const char * targetfile);

// log info
#define LOGV(...) { __android_log_print(ANDROID_LOG_INFO, "GRP_Root_Kit", __VA_ARGS__); }

// log notice
#define LOGN(x) { __android_log_print(ANDROID_LOG_INFO, "GRP_Root_Kit", "NOTICE: %s", (x)); }
#endif
